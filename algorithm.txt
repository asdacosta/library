Problem
Create a page that adds book to a library and displays them.


Algorithm
1. Assign NEWBOOK to the 'New Book' button
2. Add EVENTLISTERNER to the button
    - Display the form (Make use of dialogs and modals)
3. Add EVENTLISTERNER to 'Add to form' button click
    - Run ADDBOOKTOLIBRARY fxn
    - Hide form
4. Initialize MYLIBRARY as an empty array.
5. Create BOOK fxn with parameters: AUTHOR, TITLE, PAGES, and READ
    - Create properties for each input prepended by 'this.'
6. Use for-loop to set BOOK to infinite number of book objects for each book input
7. Create ADDBOOKTOLIBRARY fxn 
    - Take these inputs from the DOM: AUTHOR, TITLE, PAGES, and READ.
    - Use if to make sure we are moving to the next N in BOOK[N] 
    - Put inputs in the current instance (BOOK[N]) object of BOOK fxn
    - Append the object to MYLIBRARY array
8. Create displayLibrary fxn 
    - Display each book on a card on the page.
    - Create and add a clear button to the div before appending to doc
**  - Create and add a read button to the div before appending to doc
9. Add EVENTLISTERNER to clear button click
    - Button should make that particular div disappear
**
10. Add EVENTLISTERNER to read button click
    - Button should toggle read status
**


Pseudo-code
1. 
    CONST displayForm = select('.displayForm')
    CONST dialog = select('dialog')
    CONST hideForm = select('.hideForm)
2. 
    displayForm.ADDEVENTLISTERNER('click', () => {
        dialog.showModal()
})
3.
    hideForm.ADDEVENTLISTERNER('click', () => {
        dialog.close()
        addBookToLibrary();
    })
4. 
    CONST myLibrary = []
5.
    FXN Book(author, title, pages, read)
        THIS.author = author,
        THIS.title = title,
        THIS.pages = pages,
        THIS.read = read
    END-FXN
6. 
    FOR (n = 0; n < 20; n++)
        CONST book = new Book()
        myLibrary.push(book)
    END-FOR
7. 
    CONST firstOption = select.('#read')
    CONST secOption = select.('#not-read')
    LET starter = 0;

    FXN addBookToLibrary()
        CONST authorValue = select('#author').VALUE
        CONST titleValue = select('#title').VALUE
        CONST pagesValue = select('#num').VALUE
        LET readValue = ''
        
        IF (firstOption.CHECKED)
            readValue = firstOption.VALUE
        ELSE-IF (secOption.CHECKED)
            readValue = secOption.VALUE
        END-IF

        myLibrary[starter].author = authorValue
        myLibrary[starter].title = titleValue
        myLibrary[starter].pages = pagesValue
        myLibrary[starter].read = readValue
        starter += 1;
    END-FXN
8. 
    CONST cardSection = select('dialog + section')
    FXN displayLibrary()
                CONST div = create('div')
                CONST hideCard = create('button')
                hideCard.TEXTCONTENT = 'Clear';

                **
                CONST toggleRead = create('button')
                toggleRead.TEXTCONTENT = 'Flip'
                **


                hideCard.ADDEVENTLISTERNER('click', () => {
                    Remove or Hide div 
                })

                div.TEXTCONTENT = `The book ${myLibrary[n].title} by ${myLibrary[n].author} has ${myLibrary[n].pages} and ${myLibrary[n].read}`;

**              div.appendChild(toggleRead)                
                div.appendChild(hideCard)
                cardSection.appendChild(div)
    END-FXN